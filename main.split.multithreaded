package main

import (
	"bufio"
	"crypto/sha256"
	"encoding/hex"
	"fmt"
	"os"
	"strconv"
	"sync"
	"time"
)

/*
Requires SHA2 with 256 bytes 64 rounds
https://gchq.github.io/CyberChef/#recipe=SHA2('256',64,160)&input=SlVTVElOMTk5Mw
JUSTIN1993 : 96306567b5683a463820ce53dd484eccc57c53aaa3c6d5f74018da1b8ef99815
*/

var checkHash string = "96306567b5683a463820ce53dd484eccc57c53aaa3c6d5f74018da1b8ef99815"

func hashString(inputString string) string {
	hashObject := sha256.New()
	hashObject.Write([]byte(inputString))
	calculatedHash := hashObject.Sum(nil)
	return hex.EncodeToString(calculatedHash)
}

// count lines in file to split between workers
func countLines(filename string) int {
	fileHandle, err := os.Open(filename)
	if err != nil {
		panic(err)
	}
	defer fileHandle.Close()
	counterInt := 0
	scanner := bufio.NewScanner(fileHandle)
	for scanner.Scan() {
		counterInt++
	}
	return counterInt
}

func crackRange(minline int, maxline int, filename string, wg *sync.WaitGroup) {
	defer wg.Done()
	fileHandle, err := os.Open(filename)
	if err != nil {
		panic(err)
	}
	defer fileHandle.Close()
	counterInt := minline
	scanner := bufio.NewScanner(fileHandle)
	//line := "" //must define variable since for loop causes scope issues
	for counterInt <= maxline {
		for scanner.Scan() {
			line := scanner.Text()
			counterInt++
			hashedEntry := hashString(line)
			if hashedEntry == checkHash {
				foundLineNum := strconv.Itoa(counterInt)
				fmt.Println("Found Password on line " + "(" + foundLineNum + "): " + line)
				return
			}
		}
	}
}

func main() {
	startTime := time.Now()
	fmt.Println("Trying Hash: " + checkHash)
	//count total lines and split between worker jobs
	totalCount := countLines("rockyou-odd.txt")
	halfCount := totalCount / 2
	fmt.Println("File line count: " + strconv.Itoa(halfCount))
	fmt.Println("File half line count: " + strconv.Itoa(halfCount))

	//use a WaitGroup to ensure all goroutines complete before ending the program
	var wg sync.WaitGroup
	wg.Add(2)

	go crackRange(0, halfCount, "rockyou-odd.txt", &wg)
	go crackRange(halfCount, totalCount, "rockyou-odd.txt", &wg)

	//wait for all goroutines to complete
	wg.Wait()

	//print out the nanoseconds spent
	duration := time.Since(startTime)
	fmt.Println("Runtime Nanoseconds: ")
	fmt.Println(duration.Nanoseconds())
}
